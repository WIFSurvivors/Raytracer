#include "includes/AssetManager.hpp"

namespace RT {

// =================== ASSET MANAGER ==============================

std::optional<fs::path> AssetManager::set(uuid id, fs::path path,
                                          bool no_copy) {
  // 1) check if path is valid and points to a file by accessing it
  if (!can_open_file(path)) {
    LOG_ERROR(std::format("cannot open path \"{}\"", path.string()));
    return {};
  }

  // 2) check if the given uuid is already present
  //    this isn't neccessarily an error, but it can lead to inconsistent
  //    behaviour
  auto opath = get(id);
  if (opath.has_value()) {
    LOG_WARN(std::format("ID \"{}\" already exists!! This can result in "
                         "inconsistent behaviour!!",
                         boost::uuids::to_string(id)));
  }

  // 3) if the given path is not in the asset folder, make a copy
  if (!no_copy) {
    auto new_path = copy_file_and_replace_path(path);
    if (!new_path.has_value()) {
      return {};
    }
    path = fs::relative(new_path.value(), fs::canonical(fs::current_path()));
  }

  LOG(std::format("adding a new path \"{}\" with UUID \"{}\"", path.string(),
                  boost::uuids::to_string(id)));
  _um->add(id, this);
  _storage[id] = path;
  return {path};
}

std::optional<std::pair<AssetManager::uuid, fs::path>>
AssetManager::create(fs::path path, bool no_copy) {
  // 1) check if path is valid and points to a file by accessing it
  if (!can_open_file(path)) {
    LOG_ERROR(
        std::format("Cannot open path \"{}\". Wrong path?", path.string()));
    return {};
  }

  if (!no_copy) {
    auto new_path = copy_file_and_replace_path(path);
    if (!new_path.has_value()) {
      return {};
    }
    path = fs::relative(new_path.value(), fs::canonical(fs::current_path()));
  }

  auto id = _um->create(this);
  LOG(std::format("added new path \"{}\" with UUID \"{}\"", path.string(),
                  boost::uuids::to_string(id)));
  _storage[id] = path;
  return std::make_optional<std::pair<uuid, fs::path>>(
      std::make_pair(id, path));
}

void AssetManager::print() {
  VariadicTable<std::string, std::string> vt({"UUID", "Path"});

  for (const auto &[id, path] : _storage) {
    vt.addRow(boost::uuids::to_string(id), path.string());
  }

  // TODO: Use Log class as an option? -> Print tables to file
  vt.print(std::cout);
  std::cout << std::endl;
}

// generated by ChatGPT with slight modifications
bool AssetManager::can_open_file(const fs::path &path) {
  auto p = fs::absolute(path).string();
  std::ifstream file(fs::absolute(path)); // Try to open the file in read mode
  if (file.is_open()) {
    file.close(); // Close the file if it was successfully opened
    return true;
  }
  LOG_ERROR(std::format("ERROR PATH: {}", path.string()));
  return false;
}

// generated by ChatGPT with slight modifications
bool AssetManager::is_path_in_subfolder(const fs::path &targetPath) {
  try {
    // Get the path of the executable
    auto exeDir = fs::canonical(fs::current_path());
    LOG(std::format("exeDIR: {}", exeDir.string()));

    // Get the canonical (absolute) path of the target
    auto resolvedTargetPath = fs::canonical(targetPath);
    LOG(std::format("targetPath: {}", resolvedTargetPath.string()));

    // Check if the target path starts with the executable directory
    return resolvedTargetPath.string().find(exeDir.string()) == 0 &&
           resolvedTargetPath != exeDir;
  } catch (const fs::filesystem_error &e) {
    std::cerr << "Error: " << e.what() << std::endl;
    return false;
  }
}

// generated by ChatGPT with slight modifications
std::optional<fs::path>
AssetManager::copy_file_to_subfolder(const fs::path &targetPath) {
  try {
    // Get executable's directory
    auto exePath = fs::current_path();
    auto exeDir = fs::canonical(exePath);

    // Resolve absolute path of the target file
    auto resolvedTargetPath = fs::canonical(targetPath);

    // Generate relative path from the target's filename
    auto fileName = resolvedTargetPath.filename();
    auto destinationPath = get_relative_asset_folder_path() / fileName;

    // Ensure the destination directory exists
    fs::create_directories(destinationPath.parent_path());

    // Copy the file to the new location
    fs::copy_file(resolvedTargetPath, destinationPath,
                  fs::copy_options::overwrite_existing);

    // Calculate and return the relative path of the copied file
    return fs::relative(resolvedTargetPath, exeDir).string();
  } catch (const fs::filesystem_error &e) {
    std::cerr << "File copy failed: " << e.what() << std::endl;
    return {};
  }
}

std::optional<fs::path>
AssetManager::copy_file_and_replace_path(const fs::path &srcPath) {
  if (!is_path_in_subfolder(srcPath)) {
    auto dest_path = copy_file_to_subfolder(srcPath);
    if (!dest_path.has_value()) {
      LOG_ERROR(std::format("Error during copy!", srcPath.string()));
      return {};
    }
    if (!can_open_file(dest_path.value())) {
      LOG_ERROR(std::format("Cannot open path \"{}\". Error during copy?",
                            srcPath.string()));
      return {};
    }
    return dest_path;
  }
  return std::make_optional<fs::path>(srcPath);
}

// =================== ASSET =====================================

void AssetManager::Asset::set(uuid id, fs::path path, bool no_copy) {
  LOG(std::format("Try adding Asset \"{}\" ({})", path.string(),
                  boost::uuids::to_string(id)));
  _am->set(id, path, no_copy);
}
bool AssetManager::Asset::set_uuid(uuid id) {
  // check if uuid is known on manager
  // -> if not in manager, this uuid is invalid
  // => this is used when reading from a json (where the all assets are loaded
  //    before use in the scene)
  auto opath = _am->get(id);
  if (!opath.has_value()) {
    LOG_ERROR(std::format("UUID ({}) doesn't exist yet",
                          boost::uuids::to_string(id)));
    return false;
  }
  _uuid = id;
  _path = opath.value();
  LOG(std::format("Asset \"{}\" ({}) exists", _path.string(),
                  boost::uuids::to_string(_uuid)));
  return true;
}
bool AssetManager::Asset::set_path(fs::path path, bool no_copy) {
  // 1) check if path is already in the asset manager
  auto existing_uuid = _am->get(path);
  if (existing_uuid.has_value()) {
    _uuid = existing_uuid.value();
    _path = path;
    LOG(std::format("Asset \"{}\" ({}) exists", path.string(),
                    boost::uuids::to_string(_uuid)));
    return true;
  }

  // 2) otherwise create a new entry in asset manager
  auto pair = _am->create(path, no_copy);
  if (!pair.has_value()) {
    LOG_ERROR(std::format("Error during Asset creation... \"{}\"", path.string()));
    return false;
  }

  _uuid = pair.value().first;
  _path = pair.value().second;
  return true;
}

} // namespace RT
