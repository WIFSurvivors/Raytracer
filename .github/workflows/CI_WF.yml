# This workflow executes several linters on changed files based on languages used in your code base whenever
# you push a code or open a pull request.
#
# You can adjust the behavior by modifying this file.
# For more information, see:
# https://github.com/github/super-linter
name: CI Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  run-lint:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: read
      statuses: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Restore dependencies
        run: dotnet restore GUI/RaytracerGUI/RaytracerGUI.sln
        
      - name: Lint Code Base
        uses: super-linter/super-linter@v7.1.0
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: true
          SAVE_SUPER_LINTER_SUMMARY: true
          LINTER_RULES_PATH: .github/linters
          FIX_CLANG_FORMAT: true
          FIX_YAML_PRETTIER: true
          VALIDATE_CHECKOV: false
          FIX_DOTNET_SLN_FORMAT_STYLE: true
          FIX_DOTNET_SLN_FORMAT_WHITESPACE: true
          FIX_DOTNET_SLN_FORMAT_ANALYZERS: true
          IGNORE_GENERATED_FILES: true
          FIX_JSON_PRETTIER: true
          FIX_CSHARP: true
          FIX_MARKDOWN_PRETTIER: true
          FIX_MARKDOWN: true
          FIX_SHELL_SHFMT: true
          
          CPP_LINTER_RULES: CPPLINT.cfg
          FILTER_REGEX_EXCLUDE: (GUI/RaytracerGUI/obj/*)|(GUI/RaytracerGUI/bin/*)

      - name: Run dotnet format with no restore
        run: dotnet format GUI/RaytracerGUI/RaytracerGUI.sln --verbosity detailed --no-restore
  
  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    needs: run-lint  

    steps:
      - name: Download MinGW GCC 14.2.0
        run: |
          curl -LO https://github.com/niXman/mingw-builds-binaries/archive/refs/tags/14.2.0-rt_v12-rev0.zip

      - name: Install 7-Zip
        run: |
          choco install 7zip --no-progress

      - name: Extract GCC
        run: |
          7z x 14.2.0-rt_v12-rev0.zip -oC:\tools
          7z x C:\tools\x86_64-14.2.0-release-win32-seh-ucrt-rt_v12-rev0.7z -oC:\tools

      - name: Add GCC to PATH
        run: echo "C:\tools\x86_64-14.2.0-release-win32-seh-ucrt-rt_v12-rev0\bin" >> $env:GITHUB_PATH

      - name: Verify GCC Version
        run: gcc --version

      - name: Cache CMake build directories
        uses: actions/cache@v4
        with:
          path: |
            Engine/build
            ~/.cmake
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: Build Engine
        run: cmake -B Engine/build -S Engine -G "Unix Makefiles" && cmake --build Engine/build

      - name: Build GUI
        run: dotnet build GUI/RayTracerGUI/

      #- name: Run Tests for TCP
       # working-directory: TCP/build
        #run: |
         # ctest --output-on-failure
